#+TITLE:     plantuml-babel.org
#+AUTHOR:    Derek Feichtinger
#+EMAIL:     dfeich@dflt1w
# #+DATE:      2012-11-18 Sun
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

#+LATEX_HEADER_EXTRA: \usepackage{svg}

# By default I do not want that source code blocks are evaluated on export. Usually
# I want to evaluate them interactively and retain the original results.
#+PROPERTY: header-args :eval never-export

* Links
  - Homepage:  http://plantuml.com/
  - Downloads:  http://plantuml.sourceforge.net/
  - Source code: https://github.com/plantuml/plantuml
  - Language Reference: http://plantuml.com/PlantUML_Language_Reference_Guide.pdf

* Information on the local installation
   #+BEGIN_SRC emacs-lisp :results output :exports results :eval query-export
   (princ (concat (format "Emacs version: %s\n" (emacs-version))
                  (format "org version: %s\n" (org-version))))
    
   #+END_SRC

   #+RESULTS:
   : Emacs version: GNU Emacs 27.1.90 (build 1, x86_64-pc-linux-gnu, GTK+ Version 3.22.30)
   :  of 2021-01-26
   : org version: 9.4.5

  #+BEGIN_SRC sh :results output :exports results :var jpath=(expand-file-name org-plantuml-jar-path) :eval query-export
  echo "Emacs variable org-plantuml-jar-path:$jpath\n\n"
  if test ! -r "$jpath"; then
     echo "ERROR: Cannot read the file"
     return
  fi
  java -jar "$jpath" -version
  #+END_SRC

  #+RESULTS:
  #+begin_example
  Emacs variable org-plantuml-jar-path:/home/dfeich/.emacs.d/javalib/plantuml.jar


  PlantUML version 1.2021.9 (Sun Jul 25 12:13:56 CEST 2021)
  (GPL source distribution)
  Java Runtime: OpenJDK Runtime Environment
  JVM: OpenJDK 64-Bit Server VM
  Default Encoding: UTF-8
  Language: en
  Country: US

  PLANTUML_LIMIT_SIZE: 4096

  Dot version: dot - graphviz version 2.40.1 (20161225.0304)
  Installation seems OK. File generation OK
  #+end_example


**  Help text

  #+BEGIN_SRC sh :results output :var jpath=(expand-file-name org-plantuml-jar-path) :eval query-export
  java -jar "$jpath" -help
  #+END_SRC

  #+RESULTS:
  #+begin_example
  Usage: java -jar plantuml.jar [options] -gui
	  (to execute the GUI)
      or java -jar plantuml.jar [options] [file/dir] [file/dir] [file/dir]
	  (to process files or directories)

  You can use the following wildcards in files/dirs:
	  ,*	means any characters but '/'
	  ?	one and only one character but '/'
	  ,**	means any characters (used to recurse through directories)

  where options include:
      -gui		To run the graphical user interface
      -tpng		To generate images using PNG format (default)
      -tsvg		To generate images using SVG format
      -teps		To generate images using EPS format
      -tpdf		To generate images using PDF format
      -tvdx		To generate images using VDX format
      -txmi		To generate XMI file for class diagram
      -tscxml		To generate SCXML file for state diagram
      -thtml		To generate HTML file for class diagram
      -ttxt		To generate images with ASCII art
      -tutxt		To generate images with ASCII art using Unicode characters
      -tlatex		To generate images using LaTeX/Tikz format
      -tlatex:nopreamble	To generate images using LaTeX/Tikz format without preamble
      -o[utput] "dir"	To generate images in the specified directory
      -DVAR1=value	To set a preprocessing variable as if '!define VAR1 value' were used
      -Sparam1=value	To set a skin parameter as if 'skinparam param1 value' were used
      -r[ecurse]		recurse through directories
      -I/path/to/file	To include file as if '!include file' were used
      -I/path/to/*.puml	To include files with pattern
      -charset xxx	To use a specific charset (default is UTF-8)
      -e[x]clude pattern	To exclude files that match the provided pattern
      -metadata		To retrieve PlantUML sources from PNG images
      -nometadata		To NOT export metadata in PNG/SVG generated files
      -checkmetadata		Skip PNG files that don't need to be regenerated
      -version		To display information about PlantUML and Java versions
      -checkversion	To check if a newer version is available for download
      -v[erbose]		To have log information
      -quiet		To NOT print error message into the console
      -debugsvek		To generate intermediate svek files
      -h[elp]		To display this help message
      -testdot		To test the installation of graphviz
      -graphvizdot "exe"	To specify dot executable
      -p[ipe]		To use stdin for PlantUML source and stdout for PNG/SVG/EPS generation
      -encodesprite 4|8|16[z] "file"	To encode a sprite at gray level (z for compression) from an image
      -computeurl|-encodeurl	To compute the encoded URL of a PlantUML source file
      -decodeurl		To retrieve the PlantUML source from an encoded URL
      -syntax		To report any syntax error from standard input without generating images
      -language		To print the list of PlantUML keywords
      -checkonly		To check the syntax of files without generating images
      -failfast		To stop processing as soon as a syntax error in diagram occurs
      -failfast2		To do a first syntax check before processing files, to fail even faster
      -pattern		To print the list of Regular Expression used by PlantUML
      -duration		To print the duration of complete diagrams processing
      -nbthread N		To use (N) threads for processing
      -nbthread auto	To use 4 threads for processing
      -timeout N		Processing timeout in (N) seconds. Defaults to 15 minutes (900 seconds).
      -author[s]		To print information about PlantUML authors
      -overwrite		To allow to overwrite read only files
      -printfonts		To print fonts available on your system
      -enablestats	To enable statistics computation
      -disablestats	To disable statistics computation (default)
      -htmlstats		To output general statistics in file plantuml-stats.html
      -xmlstats		To output general statistics in file plantuml-stats.xml
      -realtimestats	To generate statistics on the fly rather than at the end
      -loopstats		To continuously print statistics about usage
      -splash		To display a splash screen with some progress bar
      -progress		To display a textual progress bar in console
      -pipeimageindex N	To generate the Nth image with pipe option
      -stdlib		To print standard library info
      -extractstdlib	To extract PlantUML Standard Library into stdlib folder
      -filename "example.puml"	To override %filename% variable
      -preproc		To output preprocessor text of diagrams
      -cypher		To cypher texts of diagrams so that you can share them

  If needed, you can setup the environment variable GRAPHVIZ_DOT.
  #+end_example

* simple test
#+BEGIN_SRC plantuml :file fig/sequence1.png :exports both
  @startuml
  ' this is a comment
  Alice -> Bob: Authentication Request
  Bob --> Alice: Authentication Response
  John --> Alice: another Authentication Request
  Alice --> John: another Authentication Response
  @enduml
#+END_SRC

#+ATTR_LATEX: :float t  :width 0.4\textwidth :placement [H]
#+RESULTS:
[[file:fig/sequence1.png]]

* Diagram type examples
** sequence diagrams
    Note: The =skin= parameter I used in the earlier versions of this document is no longer supported by plantuml.
 #+BEGIN_SRC plantuml :file fig/sequence2.png
   @startuml
   title Example Sequence Diagram
   activate Client
   Client -> Server: Session Initiation
   note right: Client requests new session
   activate Server
   Client <-- Server: Authorization Request
   note left: Server requires authentication
   Client -> Server: Authorization Response
   note right: Client provides authentication details
   Server --> Client: Session Token
   note left: Session established
   deactivate Server
   Client -> Client: Saves token
   deactivate Client
   @enduml
 #+END_SRC

 #+RESULTS:
 [[file:fig/sequence2.png]]



 #+BEGIN_SRC plantuml :file fig/sequence3.png
   @startuml
   actor User
   participant "First Class" as A
   participant "Second Class" as B
   participant "Last Class" as C


   User -> A: DoWork
   activate A

   A -> B: << createRequest >>
   activate B

   B -> C: DoWork
   activate C
   C --> B: WorkDone
   destroy C

   B --> A: Request <u>Created</u>
   deactivate B

   A --> User: Done
   deactivate A
   @enduml
 #+END_SRC

 #+RESULTS:
 [[file:fig/sequence3.png]]




 #+BEGIN_SRC plantuml :file fig/sequence4.png
 left to right direction
 actor remoteUser
 actor service
 rectangle Gateway {
   remoteUser -- (connect camera)
   (connect camera) -- service
   remoteUser -- (console)
   (console) -- service
 }
 #+END_SRC

 #+RESULTS:
 [[file:fig/sequence4.png]]
** old style activity diagrams
 #+BEGIN_SRC plantuml :file fig/activity1.png
 title Example Activity Diagram
 note right: Example Function
 (*)--> "Step 1"
 --> "Step 2"
 -> "Step 3"
 --> "Step 4"
 --> === STARTLOOP ===
 note top: For each element in the array
 if "Are we done?" then
   -> [no] "Do this"
   -> "Do that"
   note bottom: Important note\ngoes here
   -up-> "Increment counters"
   --> === STARTLOOP ===
 else
   --> [yes] === ENDLOOP ===
 endif
 --> "Last Step"
 --> (*)
 #+END_SRC

 #+RESULTS:
 [[file:fig/activity1.png]]


 #+BEGIN_SRC plantuml :file fig/activity2.png
 title Servlet Container

 (*) --> "ClickServlet.handleRequest()"
 --> "new Page"

 if "Page.onSecurityCheck" then
   ->[true] "Page.onInit()"
  
   if "isForward?" then
    ->[no] "Process controls"
   
    if "continue processing?" then
      -->[yes] ===RENDERING===
    else
      -->[no] ===REDIRECT_CHECK===
    endif
   
   else
    -->[yes] ===RENDERING===
   endif
  
   if "is Post?" then
     -->[yes] "Page.onPost()"
     --> "Page.onRender()" as render
     --> ===REDIRECT_CHECK===
   else
     -->[no] "Page.onGet()"
     --> render
   endif
  
 else
   -->[false] ===REDIRECT_CHECK===
 endif

 if "Do redirect?" then
  ->[yes] "redirect request"
  --> ==BEFORE_DESTROY===
 else
  if "Do Forward?" then
   -left->[yes] "Forward request"
   --> ==BEFORE_DESTROY===
  else
   -right->[no] "Render page template"
   --> ==BEFORE_DESTROY===
  endif
 endif

 --> "Page.onDestroy()"
 -->(*)
 #+END_SRC

 #+RESULTS:
 [[file:fig/activity2.png]]

** new style activity diagrams
   - http://plantuml.sourceforge.net/activity2.html

*** swimlanes

    Swimlanes actually are activity diagrams using the new syntax.
   
    #+BEGIN_SRC plantuml :file fig/swimlane1.png
 @startuml
 |Swimlane1|
 start
 :foo1;
 |#AntiqueWhite|Swimlane2|
 :foo2;
 :foo3;
 |Swimlane1|
 :foo4;
 |Swimlane2|
 :foo5;
 stop
 @enduml
    #+END_SRC

    #+ATTR_LATEX: :float t :height 0.5\textheight :placement [H]
    #+RESULTS:
    [[file:fig/swimlane1.png]]

** Class diagrams
   http://plantuml.sourceforge.net/classes.html
   
   #+BEGIN_SRC plantuml :file fig/class1.png
     class Proposal {
     also called a "study"
     ..
     ProposalID
     Proposer
     PrincipalInvestigator
     }

     class Visit << (V,#Ff8c00) >> {
     has a 1:1 mapping to a
     single user. Also used to
     reserve badges.
     ..
     Username
     starttime
     endtime
     proposalID
     beamline
     }

     note left: why is Visit linked\nto a single beamline?

     class Shift {
     ProposalID
     starttime
     endtime
     contactPerson
     }

     Proposal *-- Shift
     Proposal *-- Visit
   #+END_SRC

   #+RESULTS:
   [[file:fig/class1.png]]

** Component diagrams

   #+BEGIN_SRC plantuml :file fig/component1.png :exports both
     @startuml

     package "Some Group" {
         HTTP - [First Component]
         [Another Component]
     }

     node "Other Groups" {
    	 FTP - [Second Component]
    	 [First Component] --> FTP
    	 } 

    	 cloud {
    		 [Example 1]
             }


             database "MySql" {
                	 folder "This is my folder" {
                		 [Folder 3]
                		 }
                		 frame "Foo" {
                			 [Frame 4]
                			 }
                			 }


                			 [Another Component] --> [Example 1]
                			 [Example 1] --> [Folder 3]
                			 [Folder 3] --> [Frame 4]

                			 @enduml
   #+END_SRC  

   #+RESULTS:
   [[file:fig/component1.png]]

   The next example was posted by Cecil Westerhof on emacs-orgmode.gnu.org mailing list [2019-10-18 Fri]

   #+BEGIN_SRC plantuml :file fig/component2.png :exports both
     @startuml

     component [Producer 1\nProducer 2\nProducer ...\nProducer n] as Producers

     cloud {
    	 [Internet] as Internet1
     }

     node RabbitMQ #LightSteelBlue {
    	 [Exchange]
    	 [Queue 1\nQueue 2\nQueue ...\nQueue n] as Queues
     }

     cloud {
    	 [Internet] as Internet2
     }

     [Consumer 1\nConsumer 2\nConsumer ...\nConsumer n] as Consumers


     [Producers] -> [Internet1]  : Publish
     [Internet1] -> [Exchange]   : Publish
     [Exchange]  -> [Queues]     : Route
     [Queues]    -> [Internet2]  : Consume
     [Internet2] -> [Consumers]  : Consume

     @enduml
   #+END_SRC

   #+RESULTS:
   [[file:fig/component2.png]]

** Mindmaps
   - [2019-07-21 Sun] Needs plantuml-1.2019.08 or newer. Still in testing and features may change
   - http://plantuml.com/mindmap-diagram
   - Nice Link about mindmaps in PlantUML: http://hangaroundtheweb.com/2019/07/mind-maps-in-spacemacs/

   The examples are taken from the official plantuml page. 

   This syntax looks like the most versatile and useful to me
   - Leading "+/-" specify hierarchy level and whether the node is on the right or left of the central
     node.
   - Undescores directly following the leading position characters prevent the creation of a box around an item.  

     #+BEGIN_SRC plantuml :file fig/mindmap1.png :exports both
       @startmindmap
       + OS
       ++ Ubuntu
       +++_ Linux Mint
       +++_ Kubuntu
       +++_ Lubuntu
       +++_ KDE Neon
       ++ LMDE
       ++ SolydXK
       ++ SteamOS
       ++ Raspbian
       -- Windows 95
       -- Windows 98
       -- Windows NT
       ---_ Windows 8
       ---_ Windows 10
       @endmindmap
     #+END_SRC

     #+RESULTS:
     [[file:fig/mindmap1.png]]


   A mindmap based on org mode syntax. Note that the org headline asterisks need to be escaped by "," inside
   of a source block. It's nice that they allow for an org mode syntax, but I think this is less convenient
   to write and work with. The org headlines do not allow for text following them (syntax error).

   #+BEGIN_SRC plantuml :file fig/mindmap2.png :exports both
     @startmindmap
     ,* Debian
     ,** Ubuntu
     ,*** Linux Mint
     ,*** Kubuntu
     ,*** Lubuntu
     ,*** KDE Neon
     ,** LMDE
     ,** SolydXK
     ,** SteamOS
     ,** Raspbian with a very long name
     ,*** <s>Raspmbc</s> => OSMC
     ,*** <s>Raspyfi</s> => Volumio
     @endmindmap
   #+END_SRC

   #+RESULTS:
   [[file:fig/mindmap2.png]]
  
   #+BEGIN_SRC plantuml :file fig/mindmap3.png :exports both
     @startmindmap
     caption figure 1
     title My super title

     ,* <&flag>Debian
     ,** <&globe>Ubuntu
     ,*** Linux Mint
     ,*** Kubuntu
     ,*** Lubuntu
     ,*** KDE Neon
     ,** <&graph>LMDE
     ,** <&pulse>SolydXK
     ,** <&people>SteamOS
     ,** <&star>Raspbian with a very long name
     ,*** <s>Raspmbc</s> => OSMC
     ,*** <s>Raspyfi</s> => Volumio

     header
     My super header
     endheader

     center footer My super footer

     legend right
       Short
       legend
     endlegend
     @endmindmap
   #+END_SRC

   #+RESULTS:
   [[file:fig/mindmap3.png]]

** network
   #+BEGIN_SRC plantuml :file fig/nwdiag1.png :exports both
     @startuml
     scale 1.5
     nwdiag {
        network dmz {
                   address = "210.x.x.x/24"

                   // set multiple addresses (using comma)
                   web01 [address = "210.x.x.1, 210.x.x.20"];
                   web02 [address = "210.x.x.2"];
                   }
                   network internal {
                    	 address = "172.x.x.x/24";

                    	 web01 [address = "172.x.x.1"];
                    	 web02 [address = "172.x.x.2"];
                    	 db01;
                    	 db02;
                   }
                   }
      @enduml
   #+END_SRC

   #+RESULTS:
   [[file:fig/nwdiag1.png]]

   Regrettably rackdiag is not yet ([2021-08-18 Wed]) part of the
   functionality that was integrated in plantuml from
   nwdiag. q.v. http://blockdiag.com/en/nwdiag/rackdiag-examples.html
   #+BEGIN_SRC plantuml :file fig/nwdiag2.png :exports both
     @startuml
     scale 1.5
     rackdiag {
       // define height of rack
       16U;

       // define rack items
       1: UPS [2U];
       3: DB Server
       4: Web Server
       5: Web Server
       6: Web Server
       7: Load Balancer
       8: L3 Switch
     }
     @enduml
   #+END_SRC

   #+RESULTS:
   [[file:fig/nwdiag2.png]]

** Work Breakdown Structure (WBS)
   https://plantuml.com/wbs-diagram
   
   #+BEGIN_SRC plantuml :file fig/wbsdiag1.png :exports both
     @startwbs
     +[#SkyBlue] New Job
     ++ Decide on Job Requirements
     +++ Identity gapsy
     +++ Review JDs
     ++++ Sign-Up for courses
     ++++ Volunteer
     ++++ Reading
     ++- Checklist
     +++- Responsibilities
     +++- Location
     ++ CV Upload Done
     +++ CV Updated
     ++++ Spelling & Grammar
     ++++ Check dates
     ---- Skills
     +++ Recruitment sites chosen
     @endwbs
   #+END_SRC

   #+RESULTS:
   [[file:fig/wbsdiag1.png]]

   #+BEGIN_SRC plantuml :file fig/wbsdiag2.png :exports both
     @startwbs
     <style>
     wbsDiagram {
             .pink {
                     BackgroundColor pink
             }
             .your_style_name {
                     BackgroundColor SkyBlue
             }
     }
     </style>
     + this is the partner workpackage <<your_style_name>>
     ++ this is my workpackage <<pink>>
     ++ this is another workpackage
     @endwbs
   #+END_SRC

   #+RESULTS:
   [[file:fig/wbsdiag2.png]]


   #+BEGIN_SRC plantuml :file fig/wbsdiag3.png :exports both
     @startwbs


     <style>
     node {
             Padding 12
             Margin 3
             HorizontalAlignment center
             LineColor blue
             LineThickness 3.0
             BackgroundColor gold
             RoundCorner 40
             MaximumWidth 100
     }

     rootNode {
             LineStyle 8.0;3.0
             LineColor red
             BackgroundColor white
             LineThickness 1.0
             RoundCorner 0
             Shadowing 0.0
     }

     leafNode {
             LineColor gold
             RoundCorner 0
             Padding 3
     }

     arrow {
             LineStyle 4
             LineThickness 0.5
             LineColor green
     }
     </style>

     + Hi =)
     ++ sometimes i have node in wich i want to write a long text
     +++ this results in really huge diagram
     ++++ of course, i can explicit split with a\nnew line
     ++++ but it could be cool if PlantUML was able to split long lines, maybe with an option who specify the maximum width of a node

     @endwbs
   #+END_SRC

   #+RESULTS:
   [[file:fig/wbsdiag3.png]]

   

* Preprocessing
  https://plantuml.com/preprocessing

  The simple preprocessor allows the definition of variables and functions. Some
  standard functions like %date are already provided.

  #+BEGIN_SRC plantuml :file fig/preproc1.png :exports both
    @startuml
    scale 1.5
    !function $inc($value, $step=1)
    !return $value + $step
    !endfunction

    Alice -> Bob : Just one more $inc(3)
    Alice -> Bob : Add two to three : $inc(3, 2)

    center footer generated on %date("yyyy.MM.dd 'at' HH:mm")
    @enduml
  #+END_SRC

  #+RESULTS:
  [[file:fig/preproc1.png]]

* skinparam
** Gradients
   Minimally adapted from https://blog.jdriven.com/2017/10/plantuml-pleasantness-use-gradients-diagrams/
    
   #+BEGIN_SRC plantuml :file fig/gradients1.png
     @startuml

     title Gradient

     skinparam defaultTextAlignment center
     skinparam RectangleFontSize 20

     skinparam TitleFontStyle bold
     skinparam TitleFontColor #e723e7

     ' Define two colors for a gradient of the background
     ' and use "-" to define that the gradient goes from top to bottom.
     skinparam BackgroundColor  #000000-#afafaf

     ' Define two colors for a default background gradient of Rectangles
     ' and use / for top left to bottom right.
     skinparam RectangleBackgroundColor #ffd200/#8cfcff

     rectangle A [
     From top left
     to bottom right
     <&fullscreen-enter>
     ]

     ' Use "\" for bottom left to top right
     rectangle B #ffd200\8cfcff [
     From bottom left
     to top right
     <&resize-both>
     ]

     ' Use "|" for left to right
     rectangle C #ffd200|8cfcff [
     From left
     to right
     <&resize-width>
     ]

     ' Use "-" for top to bottom
     rectangle D #ffd200-8cfcff [
     From top
     to bottom
     <&resize-height>
     ]

     @enduml
   #+END_SRC    

   #+RESULTS:
   [[file:fig/gradients1.png]]

* Scaling
#+BEGIN_SRC plantuml :file fig/scale-sequence1.png :exports both
  @startuml
  scale 2

  Alice -> Bob: Authentication Request
  Bob --> Alice: Authentication Response
  John --> Alice: another Authentication Request
  Alice --> John: another Authentication Response
  @enduml
#+END_SRC

#+RESULTS:
[[file:fig/scale-sequence1.png]]
    
* TODO using SVG graphics

  The /svg/ package uses inkscape to separate the text and graphical
  elements of the SVG into a Tex file (*.pdf_tex) and a PDF file
  containig the graph elements.  E.g. svg-sequence1.svg into
  svg-sequence1.pdf_tex and svg-sequence1.pdf.

  Currently, SVG pictures can only be rendered correctly, *if the picture
  is in the same directory* as the tex source file (and therefore also the org source file).

  Note: with the current org version 9.1.14 and Emacs 26.1 the SVG is not correctly displayed in
  the org buffer, but the SVG renders fine in the exported Latex PDF.
  
  # #+LATEX: \setsvg{svgpath = fig/}
  # #+LATEX: \setsvg{path = fig/}   

  #+BEGIN_SRC plantuml :file svg-sequence1.svg :exports both
    @startuml
    ' this is a comment
    Alice -> Bob: Authentication Request
    Bob --> Alice: Authentication Response
    John --> Alice: another Authentication Request
    Alice --> John: another Authentication Response
    @enduml
  #+END_SRC

  #+RESULTS:
  [[file:svg-sequence1.svg]]

* COMMENT babel settings

  Note: Since minted (which I use for source code coloring) does not contain a lexer
  for dot, I disable it by setting =org-latex-listings= to =nil= in this buffer.

Local Variables:
org-babel-after-execute-hook: (lambda () (org-display-inline-images nil t) (org-redisplay-inline-images))
org-latex-listings: nil
org-confirm-babel-evaluate: nil
End:

